import { String, Int, Float, Double, Boolean, Text, Datetime, File, Image } from "oak-domain/src/types/DataType";
import { Q_DateValue, Q_BooleanValue, Q_NumberValue, Q_StringValue, Q_EnumValue, NodeId, MakeFilter, FulltextFilter, ExprOp, ExpressionKey } from "oak-domain/src/types/Demand";
import { OneOf, ValueOf } from "oak-domain/src/types/Polyfill";
import * as SubQuery from "../_SubQuery";
import { Operation as OakOperation } from "oak-domain/src/types/Entity";
import { UserState, IdState, ParticularAction, Action } from "./Action";
import * as Mobile from "../Mobile/Schema";
import * as UserSystem from "../UserSystem/Schema";
import * as Token from "../Token/Schema";
import * as WechatUser from "../WechatUser/Schema";
import * as ExtraFile from "../ExtraFile/Schema";
export type OpSchema = {
    id: String<64>;
    $$createAt$$?: Datetime;
    $$updateAt$$?: Datetime;
    $$removeAt$$?: Datetime;
    name: String<16>;
    nickname?: String<64>;
    password?: Text;
    birth?: Datetime;
    gender?: 'male' | 'female';
    avatar?: Image;
    idCardType?: 'ID-Card' | 'passport' | 'Mainland-passport';
    idNumber?: String<32>;
    refId?: String<64>;
    userState?: UserState;
    idState?: IdState;
};
export type OpAttr = keyof OpSchema;
export type Schema = {
    id: String<64>;
    $$createAt$$?: Datetime;
    $$updateAt$$?: Datetime;
    $$removeAt$$?: Datetime;
    name: String<16>;
    nickname?: String<64>;
    password?: Text;
    birth?: Datetime;
    gender?: 'male' | 'female';
    avatar?: Image;
    idCardType?: 'ID-Card' | 'passport' | 'Mainland-passport';
    idNumber?: String<32>;
    refId?: String<64>;
    userState?: UserState;
    idState?: IdState;
    ref?: Schema;
    mobile$user?: Array<Mobile.Schema>;
    userSystem$user?: Array<UserSystem.Schema>;
    token$user?: Array<Token.Schema>;
    token$player?: Array<Token.Schema>;
    user$ref?: Array<Schema>;
    wechatUser$user?: Array<WechatUser.Schema>;
    extraFile$entity?: Array<ExtraFile.Schema>;
} & {
    [A in ExpressionKey]?: any;
};
type AttrFilter = {
    id: Q_StringValue | SubQuery.UserIdSubQuery;
    $$createAt$$: Q_DateValue;
    $$updateAt$$: Q_DateValue;
    name: Q_StringValue;
    nickname: Q_StringValue;
    password: Q_StringValue;
    birth: Q_DateValue;
    gender: Q_EnumValue<'male' | 'female'>;
    avatar: Q_StringValue;
    idCardType: Q_EnumValue<'ID-Card' | 'passport' | 'Mainland-passport'>;
    idNumber: Q_StringValue;
    refId: Q_StringValue | SubQuery.UserIdSubQuery;
    ref: Filter;
    userState: Q_EnumValue<UserState>;
    idState: Q_EnumValue<IdState>;
};
export type Filter = MakeFilter<AttrFilter & ExprOp<OpAttr> & FulltextFilter>;
export type Projection = {
    "#id"?: NodeId;
    id: 1;
    $$createAt$$?: 1;
    $$updateAt$$?: 1;
    name?: 1;
    nickname?: 1;
    password?: 1;
    birth?: 1;
    gender?: 1;
    avatar?: 1;
    idCardType?: 1;
    idNumber?: 1;
    refId?: 1;
    ref?: Projection;
    userState?: 1;
    idState?: 1;
    mobile$user?: Mobile.Selection;
    userSystem$user?: UserSystem.Selection;
    token$user?: Token.Selection;
    token$player?: Token.Selection;
    user$ref?: Selection;
    wechatUser$user?: WechatUser.Selection;
    extraFile$entity?: ExtraFile.Selection;
} & ExprOp<OpAttr>;
export type ExportProjection = {
    "#id"?: NodeId;
    id?: string;
    $$createAt$$?: string;
    $$updateAt$$?: string;
    name?: string;
    nickname?: string;
    password?: string;
    birth?: string;
    gender?: string;
    avatar?: string;
    idCardType?: string;
    idNumber?: string;
    refId?: string;
    ref?: ExportProjection;
    userState?: string;
    idState?: string;
    mobile$user?: Mobile.Exportation;
    userSystem$user?: UserSystem.Exportation;
    token$user?: Token.Exportation;
    token$player?: Token.Exportation;
    user$ref?: Exportation;
    wechatUser$user?: WechatUser.Exportation;
    extraFile$entity?: ExtraFile.Exportation;
} & ExprOp<OpAttr>;
type UserIdProjection = OneOf<{
    id: 1;
    refId: 1;
}>;
export type SortAttr = OneOf<{
    id: 1;
    $$createAt$$: 1;
    $$updateAt$$: 1;
    name: 1;
    nickname: 1;
    password: 1;
    birth: 1;
    gender: 1;
    avatar: 1;
    idCardType: 1;
    idNumber: 1;
    refId: 1;
    ref: SortAttr;
    userState: 1;
    idState: 1;
} & ExprOp<OpAttr>>;
export type SortNode = {
    $attr: SortAttr;
    $direction?: "asc" | "desc";
};
export type Sorter = SortNode[];
export type SelectOperation<P = Projection> = OakOperation<"select", P, Filter, Sorter>;
export type Selection<P = Projection> = Omit<SelectOperation<P>, "action">;
export type Exportation = OakOperation<"export", ExportProjection, Filter, Sorter>;
type CreateOperationData = Omit<OpSchema, "refId"> & ({
    ref?: CreateSingleOperation | (UpdateOperation & {
        id: String<64>;
    });
    refId?: undefined;
} | {
    ref?: undefined;
    refId?: String<64>;
}) & {
    mobile$user?: Mobile.CreateOperation | Mobile.UpdateOperation;
    userSystem$user?: UserSystem.CreateOperation | UserSystem.UpdateOperation;
    token$user?: Token.CreateOperation | Token.UpdateOperation;
    token$player?: Token.CreateOperation | Token.UpdateOperation;
    user$ref?: CreateOperation | UpdateOperation;
    wechatUser$user?: WechatUser.CreateOperation | WechatUser.UpdateOperation;
    extraFile$entity?: ExtraFile.CreateOperation | ExtraFile.UpdateOperation;
};
export type CreateSingleOperation = OakOperation<"create", CreateOperationData>;
export type CreateMultipleOperation = OakOperation<"create", Array<CreateOperationData>>;
export type CreateOperation = CreateSingleOperation | CreateMultipleOperation;
type UpdateOperationData = Partial<Omit<OpSchema, "id" | "refId">> & ({
    ref?: CreateSingleOperation | Omit<UpdateOperation, "id" | "ids" | "filter">;
    refId?: undefined;
} | {
    ref?: undefined;
    refId?: String<64>;
}) & {
    mobiles$user?: Mobile.CreateOperation | Omit<Mobile.UpdateOperation, "id" | "ids" | "filter">;
    userSystems$user?: UserSystem.CreateOperation | Omit<UserSystem.UpdateOperation, "id" | "ids" | "filter">;
    tokens$user?: Token.CreateOperation | Omit<Token.UpdateOperation, "id" | "ids" | "filter">;
    tokens$player?: Token.CreateOperation | Omit<Token.UpdateOperation, "id" | "ids" | "filter">;
    users$ref?: CreateOperation | Omit<UpdateOperation, "id" | "ids" | "filter">;
    wechatUsers$user?: WechatUser.CreateOperation | Omit<WechatUser.UpdateOperation, "id" | "ids" | "filter">;
    extraFiles$entity?: ExtraFile.CreateOperation | Omit<ExtraFile.UpdateOperation, "id" | "ids" | "filter">;
};
export type UpdateOperation = OakOperation<ParticularAction | "update", UpdateOperationData, Filter>;
type RemoveOperationData = {} & {
    ref?: Omit<UpdateOperation | RemoveOperation, "id" | "ids" | "filter">;
} & {
    mobiles$user?: Omit<Mobile.UpdateOperation | Mobile.RemoveOperation, "id" | "ids" | "filter">;
    userSystems$user?: Omit<UserSystem.UpdateOperation | UserSystem.RemoveOperation, "id" | "ids" | "filter">;
    tokens$user?: Omit<Token.UpdateOperation | Token.RemoveOperation, "id" | "ids" | "filter">;
    tokens$player?: Omit<Token.UpdateOperation | Token.RemoveOperation, "id" | "ids" | "filter">;
    users$ref?: Omit<UpdateOperation | RemoveOperation, "id" | "ids" | "filter">;
    wechatUsers$user?: Omit<WechatUser.UpdateOperation | WechatUser.RemoveOperation, "id" | "ids" | "filter">;
    extraFiles$entity?: Omit<ExtraFile.UpdateOperation | ExtraFile.RemoveOperation, "id" | "ids" | "filter">;
};
export type RemoveOperation = OakOperation<"remove", RemoveOperationData, Filter>;
export type Operation = CreateOperation | UpdateOperation | RemoveOperation | SelectOperation;
export type UserIdSubQuery = Selection<UserIdProjection>;
export type NativeAttr = OpAttr | `ref.${OpAttr}` | `ref.ref.${OpAttr}` | `ref.ref.ref.${OpAttr}`;
export type FullAttr = NativeAttr | `mobiles$${number}.${Mobile.NativeAttr}` | `userSystems$${number}.${UserSystem.NativeAttr}` | `tokens$user$${number}.${Token.NativeAttr}` | `tokens$player$${number}.${Token.NativeAttr}` | `users$${number}.${NativeAttr}` | `wechatUsers$${number}.${WechatUser.NativeAttr}` | `extraFiles$${number}.${ExtraFile.NativeAttr}`;
export type EntityDef = {
    Schema: Schema;
    OpSchema: OpSchema;
    Action: Action;
    Selection: Selection;
    Operation: Operation;
    ParticularAction: ParticularAction;
};